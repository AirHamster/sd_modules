/*
    ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
*/

/**
 * @defgroup LOG Log Driver
 * @brief   Log sensor driver.
 * @details Detail will be writen soon
 * @pre     In order to use this driver the @p USE_LAG_MODULE option
 *          must be enabled in @p config.h.
 *
 * @section log_1 Stateflow
 * The driver implements a state machine internally, not all the driver
 * functionalities can be used in any moment, any transition not explicitly
 * shown in the following diagram has to be considered an error and shall
 * be captured by an assertion (if enabled).
 * @dot
  digraph example {
    rankdir="LR";
    node [shape=circle, fontname=Helvetica, fontsize=8, fixedsize="true",
          width="0.9", height="0.9"];
    edge [fontname=Helvetica, fontsize=8];

    stop  [label="GPT_STOP\nLow Power"];
    uninit [label="GPT_UNINIT", style="bold"];
    ready [label="GPT_READY\nClock Enabled"];
    continuous [label="GPT_CONT..S\nContinuous\nMode"];
    oneshot [label="GPT_ONESHOT\nOne Shot\nMode"];

    uninit -> stop [label=" gptInit()", constraint=false];
    stop -> stop [label="\ngptStop()"];
    stop -> ready [label="\ngptStart()"];
    ready -> stop [label="\ngptStop()"];
    ready -> ready [label="\ngptStart()"];
    ready -> continuous [label="\ngptStartContinuous()"];
    continuous -> ready [label="\ngptStopTimer()"];
    continuous -> continuous [label=">callback<"];
    ready -> oneshot [label="\ngptStartOneShot()\ngptPolledDelay()"];
    oneshot -> ready [label="\n>callback<\nor\nDelay Over"];
  }
 * @enddot
 *
 * @section log_2 Log operations.
 * This driver abstracts a generic timer composed of:
 * - A clock prescaler.
 * - A main up counter.
 * - A comparator register that resets the main counter to zero when the limit
 *   is reached. A callback is invoked when this happens.
 * .
 * The timer can operate in three different modes:
 * - <b>Continuous Mode</b>, a periodic callback is invoked until the driver
 *   is explicitly stopped.
 * - <b>One Shot Mode</b>, a callback is invoked after the programmed period
 *   and then the timer automatically stops.
 * - <b>Delay Mode</b>, the timer is used for inserting a brief delay into
 *   the execution flow, no callback is invoked in this mode.
 * .
 */
